//
//  Questions.swift
//  TimeToThink
//
//  Created by Savonevich Constantine on 5/12/19.
//  Copyright ¬© 2019 Savonevich Konstantin. All rights reserved.
//

struct Questions {
    var text: String?
    var responseType: ResponseType
    var answers: [Answers]?
}


extension Questions {
    static func loadData() -> [Questions] {
        return [
            // MARK: - Questions for selectedTestType.car
            Questions(
                text: "–ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ?",
                responseType: .single,
                answers: [
                    Answers(text: "–ï—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª", answerType: .carHatchback),
                    Answers(text: "–ú–µ–Ω—å—à–µ 2 –ª–µ—Ç", answerType: .carSedan),
                    Answers(text: "–û—Ç 2 –¥–æ 5 –ª–µ—Ç", answerType: .carPikup),
                    Answers(text: "–ë–æ–ª—å—à–µ 5 –ª–µ—Ç", answerType: .carSuv)
                ]
            ),
            Questions(
                text: "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
                responseType: .multiple,
                answers: [
                    Answers(text: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º", answerType: .carSedan),
                    Answers(text: "–§–µ—Ä–º–µ—Ä–æ–º", answerType: .carPikup),
                    Answers(text: "–ö—É—Ä—å–µ—Ä–æ–º", answerType: .carHatchback),
                    Answers(text: "–ë–∞–Ω–∫–∏—Ä–æ–º", answerType: .carSuv),
                    Answers(text: "–ö–ª–æ—É–Ω–æ–º", answerType: .carMinivan)
                ]
            ),
            Questions(
                text: "–ù–∞—Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–∞—è –≤–∞—à–∞ —Å–µ–º—å—è?",
                responseType: .ranged,
                answers: [
                    Answers(text: "üôç‚Äç‚ôÇÔ∏è", answerType: .carHatchback),
                    Answers(text: "", answerType: .carSedan),
                    Answers(text: "", answerType: .carPikup),
                    Answers(text: "", answerType: .carSuv),
                    Answers(text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", answerType: .carMinivan)
                ]
            ),
            
            // MARK: - Questions for selectedTestType.sport
            Questions(
                text: "C–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å —Å–ø–æ—Ä—Ç—É?",
                responseType: .single,
                answers: [
                    Answers(text: "1 - 3 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é", answerType: .sportSwimming),
                    Answers(text: "4 - 6 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é", answerType: .sportChess),
                    Answers(text: "1 - 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å", answerType: .sportWrestling),
                    Answers(text: "3 - 4 —á–∞—Å–∞ –≤ –¥–µ–Ω—å", answerType: .sportHockey),
                    Answers(text: "–í—Å—ë —Å–≤–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", answerType: .sportFootball)
                ]
            ),
            Questions(
                text: "–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–≤–æ—ë —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                responseType: .multiple,
                answers: [
                    Answers(text: "–ß–∏—Ç–∞—é –∫–Ω–∏–≥—É", answerType: .sportChess),
                    Answers(text: "–ò–≥—Ä–∞—é –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä", answerType: .sportHockey),
                    Answers(text: "–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", answerType: .sportWrestling),
                    Answers(text: "–°–∏–∂—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", answerType: .sportSwimming),
                    Answers(text: "–ì—É–ª—è—é", answerType: .sportFootball)
                ]
            ),
            Questions(
                text: "–í—ã –ª—é–±–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ?",
                responseType: .ranged,
                answers: [
                    Answers(text: "–ò–∑–±–µ–≥–∞—é", answerType: .sportChess),
                    Answers(text: "–ù–µ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ", answerType: .sportWrestling),
                    Answers(text: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", answerType: .sportSwimming),
                    Answers(text: "–ë–æ–ª–µ–µ —á–µ–º", answerType: .sportHockey),
                    Answers(text: "–û–±–æ–∂–∞—é", answerType: .sportFootball)
                ]
            ),
            
            // MARK: - Questions for selectedTestType.animal
            Questions(
                text: "–ö–∞–∫—É—é –ø–∏—â—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                responseType: .single,
                answers: [
                    Answers(text: "–°—Ç–µ–π–∫", answerType: .animalDog),
                    Answers(text: "–†—ã–±–∞", answerType: .animalCat),
                    Answers(text: "–ú–æ—Ä–∫–æ–≤–∫–∞", answerType: .animalRabbit),
                    Answers(text: "–ö—É–∫—É—Ä—É–∑–∞", answerType: .animalTurtle)
                ]
            ),
            Questions(
                text: "–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å?",
                responseType: .multiple,
                answers: [
                    Answers(text: "–ü–ª–∞–≤–∞—Ç—å", answerType: .animalTurtle),
                    Answers(text: "–°–ø–∞—Ç—å", answerType: .animalCat),
                    Answers(text: "–û–±–Ω–∏–º–∞—Ç—å—Å—è", answerType: .animalRabbit),
                    Answers(text: "–ï—Å—Ç—å", answerType: .animalDog),
                    Answers(text: "–ì—É–ª—è—Ç—å", answerType: .animalDog)
                ]
            ),
            Questions(
                text: "–í—ã –ª—é–±–∏—Ç–µ –µ–∑–¥–∏—Ç—å –Ω–∞ –º–∞—à–∏–Ω–µ?",
                responseType: .ranged,
                answers: [
                    Answers(text: "–ù–µ–Ω–∞–≤–∏–∂—É", answerType: .animalCat),
                    Answers(text: "–ù–µ—Ä–≤–Ω–∏—á–∞—é", answerType: .animalRabbit),
                    Answers(text: "–ù–µ –∑–∞–º–µ—á–∞—é", answerType: .animalTurtle),
                    Answers(text: "–û–±–æ–∂–∞—é", answerType: .animalDog)
                ]
            ),
            
            // MARK: - Questions for selectedTestType.pizza
            Questions(
                text: "–ö–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à –ø–æ–≤–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã?",
                responseType: .single,
                answers: [
                    Answers(text: "–ö—É–ø–∏–ª –ø–∏–≤–æ, –Ω—É–∂–Ω–∞ –∑–∞–∫—É—Å–∫–∞", answerType: .pizzaPepperoni),
                    Answers(text: "–ï–¥–∞ –¥–ª—è –±–æ–ª—å—à–æ–π –∫–æ–º–ø–∞–Ω–∏–∏", answerType: .pizzaMushrooms),
                    Answers(text: "–•–æ—á–µ—Ç—Å—è —á–µ–≥–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–≥–æ", answerType: .pizzaHawaiian),
                    Answers(text: "–û–±–µ–¥ –≤ –æ—Ñ–∏—Å", answerType: .pizzaMushrooms)
                ]
            ),
            Questions(
                text: "–Ø –ª—é–±–ª—é –∫–æ–≥–¥–∞ –ø–∏—Ü—Ü–∞ ... ?",
                responseType: .multiple,
                answers: [
                    Answers(text: "–° –º—è—Å–æ–º", answerType: .pizzaPepperoni),
                    Answers(text: "–ù–µ–æ–±—ã—á–Ω–∞—è", answerType: .pizzaHawaiian),
                    Answers(text: "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", answerType: .pizzaMushrooms),
                    Answers(text: "–ù–µ–¥–æ—Ä–æ–≥–∞—è", answerType: .pizzaMargarita),
                    Answers(text: "–í–∫—É—Å–Ω–∞—è", answerType: .pizzaMargarita)
                ]
            ),
            Questions(
                text: "–ö–∞–∫ —Å–∏–ª—å–Ω–æ –≤—ã –ª—é–±–∏—Ç–µ —Å—ã—Ä –≤ –ø–∏—Ü—Ü–µ?",
                responseType: .ranged,
                answers: [
                    Answers(text: "–ù–µ–Ω–∞–≤–∏–∂—É", answerType: .pizzaMushrooms),
                    Answers(text: "–ù–µ –∑–∞–º–µ—á–∞—é", answerType: .pizzaPepperoni),
                    Answers(text: "–õ—é–±–ª—é", answerType: .pizzaHawaiian),
                    Answers(text: "–û–±–æ–∂–∞—é", answerType: .pizzaMargarita)
                ]
            )
        ]
    }
}
